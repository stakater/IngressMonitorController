name: Pull Request

on:
  pull_request_target:
    branches:
      - 'master'
    paths-ignore:
      - '*.md'
      - 'docs/'
      - 'examples/'
      - 'hack/'
      - 'config/'
env:
  DOCKER_FILE_PATH: Dockerfile
  GOLANG_VERSION: 1.21
  HELM_VERSION: v3.8.2
  KIND_VERSION: "v0.17.0"

jobs:
  build:
    runs-on: ubuntu-latest
    name: Pull Request

    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.sha}}

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GOLANG_VERSION }}

    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.54
        only-new-issues: false
        args: --timeout 10m

    # Set up helm binary
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Helm Lint
      run: |
        helm lint charts/ingressmonitorcontroller

    - name: Install kind
      uses: engineerd/setup-kind@v0.5.0
      with:
        version:  ${{ env.KIND_VERSION }}

    - name: Check cluster info
      run: |
        kubectl version --client
        kind version
        kind version | grep -q ${KIND_VERSION}

    - name: Set up Cluster
      run: |
        kubectl cluster-info
        make install
        mkdir -p .local
        echo "${{ secrets.SECRET_KUBERNETES_RESOURCES }}" | base64 --decode > .local/test-config.yaml

    - name: Test
      run: make test

    - name: Generate Tag
      id: generate_tag
      run: |
        sha=${{ github.event.pull_request.head.sha }}
        tag="SNAPSHOT-PR-${{ github.event.pull_request.number }}-${sha:0:8}"
        echo "GIT_TAG=$(echo ${tag})" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        buildkitd-flags: --debug

    - name: Login to Registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.STAKATER_DOCKERHUB_USERNAME }}
        password: ${{ secrets.STAKATER_DOCKERHUB_PASSWORD }}

    - name: Generate image repository path
      run: |
        echo IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ${{ env.DOCKER_FILE_PATH  }}
        pull: true
        push: true
        build-args: BUILD_PARAMETERS=${{ env.BUILD_PARAMETERS }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm,linux/arm64
        tags: |
          ${{ env.IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.GIT_TAG }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Comment on PR
      uses: mshick/add-pr-comment@v2
      if: always()
      env:
       GITHUB_TOKEN: ${{ secrets.STAKATER_GITHUB_TOKEN }}
      with:
        message-success: '@${{ github.actor }} Image is available for testing. `docker pull ${{ env.IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.GIT_TAG }}`'
        message-failure: '@${{ github.actor }} Yikes! You better fix it before anyone else finds out! [Build](https://github.com/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }}/checks) has Failed!'
        allow-repeats: false

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always() # Pick up events even if the job fails or is canceled.
      with:
        status: ${{ job.status }}
        fields: repo,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.STAKATER_DELIVERY_SLACK_WEBHOOK }}
