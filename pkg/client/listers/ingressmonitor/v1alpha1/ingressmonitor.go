/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/stakater/IngressMonitorController/pkg/apis/ingressmonitor/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IngressMonitorLister helps list IngressMonitors.
// All objects returned here must be treated as read-only.
type IngressMonitorLister interface {
	// List lists all IngressMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IngressMonitor, err error)
	// IngressMonitors returns an object that can list and get IngressMonitors.
	IngressMonitors(namespace string) IngressMonitorNamespaceLister
	IngressMonitorListerExpansion
}

// ingressMonitorLister implements the IngressMonitorLister interface.
type ingressMonitorLister struct {
	indexer cache.Indexer
}

// NewIngressMonitorLister returns a new IngressMonitorLister.
func NewIngressMonitorLister(indexer cache.Indexer) IngressMonitorLister {
	return &ingressMonitorLister{indexer: indexer}
}

// List lists all IngressMonitors in the indexer.
func (s *ingressMonitorLister) List(selector labels.Selector) (ret []*v1alpha1.IngressMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngressMonitor))
	})
	return ret, err
}

// IngressMonitors returns an object that can list and get IngressMonitors.
func (s *ingressMonitorLister) IngressMonitors(namespace string) IngressMonitorNamespaceLister {
	return ingressMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IngressMonitorNamespaceLister helps list and get IngressMonitors.
// All objects returned here must be treated as read-only.
type IngressMonitorNamespaceLister interface {
	// List lists all IngressMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IngressMonitor, err error)
	// Get retrieves the IngressMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IngressMonitor, error)
	IngressMonitorNamespaceListerExpansion
}

// ingressMonitorNamespaceLister implements the IngressMonitorNamespaceLister
// interface.
type ingressMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IngressMonitors in the indexer for a given namespace.
func (s ingressMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IngressMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngressMonitor))
	})
	return ret, err
}

// Get retrieves the IngressMonitor from the indexer for a given namespace and name.
func (s ingressMonitorNamespaceLister) Get(name string) (*v1alpha1.IngressMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ingressmonitor"), name)
	}
	return obj.(*v1alpha1.IngressMonitor), nil
}
